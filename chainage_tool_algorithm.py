# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ChainageTool
                                 A QGIS plugin
 This tool provides utility to convert line to chainage points.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-25
        copyright            : (C) 2024 by Wayne
        email                : wayne.hu2007@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Wayne"
__date__ = "2024-07-25"
__copyright__ = "(C) 2024 by Wayne"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

# WAYNE: 需要添加和删除属性需要导入QVariant
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (
    QgsProcessing,
    QgsFeature,
    QgsFeatureSink,
    QgsProcessingAlgorithm,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterField,
    QgsProcessingParameterFeatureSink,
    # Added for chainage tool
    QgsGeometry,
    QgsField,
    QgsFields,
)
from .chainagetool import points_along_line


"""https://docs.qgis.org/3.34/en/docs/pyqgis_developer_cookbook/vector.html
from qgis.core import (
  QgsApplication,
  QgsDataSourceUri,
  QgsCategorizedSymbolRenderer,
  QgsClassificationRange,
  QgsPointXY,
  QgsProject,
  QgsExpression,
  QgsField,
  QgsFields,
  QgsFeature,
  QgsFeatureRequest,
  QgsFeatureRenderer,
  QgsGeometry,
  QgsGraduatedSymbolRenderer,
  QgsMarkerSymbol,
  QgsMessageLog,
  QgsRectangle,
  QgsRendererCategory,
  QgsRendererRange,
  QgsSymbol,
  QgsVectorDataProvider,
  QgsVectorLayer,
  QgsVectorFileWriter,
  QgsWkbTypes,
  QgsSpatialIndex,
  QgsVectorLayerUtils
)

from qgis.core.additions.edit import edit

from qgis.PyQt.QtGui import (
    QColor,
)
"""


# WAYNE: 可能会需要：QgsVectorLayer, QgsField, QgsFeature, QgsGeometry,QgsPointXY, QgsProject
# import pandas as pd
# from math import radians, degrees, floor, ceil


class ChainageToolAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = "OUTPUT"
    INPUT = "INPUT"
    ID = "ID"
    DISTANCE = "DISTANCE"
    START_MILEAGE = "START_MILEAGE"
    END_MILEAGE = "END_MILEAGE"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        所有的输入和输出都在这里定义,self.tr()中的字符串是名字.
        # TODO: if field name is standard, fill in window straightaway(should be in init?)
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr("Input layer"),
                [QgsProcessing.TypeVectorAnyGeometry],
            )
        )
        self.addParameter(
            QgsProcessingParameterField(
                self.ID,
                self.tr("Select identifier field"),
                None,
                self.INPUT,
                QgsProcessingParameterField.DataType.Any,
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterField(
                self.START_MILEAGE,
                self.tr("Select start mileage field"),
                None,
                self.INPUT,
                QgsProcessingParameterField.DataType.Any,
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterField(
                self.END_MILEAGE,
                self.tr("Select end mileage field"),
                None,
                self.INPUT,
                QgsProcessingParameterField.DataType.Any,
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterField(
                self.DISTANCE,
                self.tr("Select interpolation distance field"),
                None,
                self.INPUT,
                QgsProcessingParameterField.DataType.Any,
                optional=True,
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(self.OUTPUT, self.tr("Output layer"))
        )

    def processAlgorithm(self, parameters, context, feedback):
        def create_points_at(
                startpoint,
                endpoint,
                distance,
                geom,
                fid,
                force,
                vLength,
            ):
                """
                Creating Points at coordinates along the line
                """
                # don't allow distance to be zero and loop endlessly
                # if fo_fila:
                #     distance = 0

                # 如果间距为负，设为线段长

                if distance <= 0:
                    distance = geom.length()

                length = geom.length()
                # 如果终点长>总长，设为总长
                if length < endpoint:
                    endpoint = length
                # 如果等分有值，复制一份length2，如果起终点有值，再减去
                if divide > 0:
                    length2 = length
                    if startpoint > 0:
                        length2 = length - startpoint
                    if endpoint > 0:
                        length2 = endpoint
                    if startpoint > 0 and endpoint > 0:
                        length2 = endpoint - startpoint  # length-(length-endpoint)-startpoint
                    distance = length2 / divide
                    current_distance = distance
                else:
                    current_distance = distance

                feats = []

                if endpoint > 0:
                    length = endpoint

                # set the first point at startpoint
                point = geom.interpolate(startpoint)
                # convert 3D geometry to 2D geometry as OGR seems to have problems with this
                point = QgsGeometry.fromPointXY(point.asPoint())

                fields = QgsFields()
                fields.append( QgsField(name="id", type=QVariant.Int))
                fields.append(QgsField(name="dist", type=QVariant.Double))

                feature = QgsFeature(fields)
                feature["dist"] = startpoint
                feature["id"] = fid

                feature.setGeometry(point)
                feats.append(feature)

                while startpoint + current_distance <= length:
                    # Get a point along the line at the current distance
                    point = geom.interpolate(startpoint + current_distance)
                    # Create a new QgsFeature and assign it the new geometry
                    feature = QgsFeature(fields)
                    feature["dist"] = startpoint + current_distance
                    feature["id"] = fid
                    feature.setGeometry(point)
                    feats.append(feature)
                    # Increase the distance
                    current_distance = current_distance + distance

                # set the last point at endpoint if wanted
                if force is True:
                    end = geom.length()
                    point = geom.interpolate(end)
                    feature = QgsFeature(fields)
                    feature["dist"] = end
                    feature["id"] = fid
                    feature.setGeometry(point)
                    feats.append(feature)
                return feats

        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            source.fields(),
            source.wkbType(),
            source.sourceCrs(),
        )

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            # 处理开始
            # 1. Loop through line features, get Nth feature (geom + props)
            geom = feature.geometry()
            attrs = feature.attributes()
            geom_type = geom.wkbType()
            if geom_type != 1:
                # 2. vLength = eM - sM = IN4 - IN3; vD = IN5;<-get from attrs[field input]
                sM = feature[self.START_MILEAGE]
                eM = feature[self.END_MILEAGE]
                vLength = eM - sM
                vD = feature[self.DISTANCE]
                id = feature[self.ID]
                # 3. Generate list of fraction of total length (0-1);
                frac_list = create_points_at(
                    startpoint=sM,
                    endpoint=eM,
                    distance=vD,
                    vLength=vLength,
                    geom=geom,
                    fid=id,
                )

                """
                # Enable Python support and load DesignScript library
                import clr
                clr.AddReference('ProtoGeometry')
                from Autodesk.DesignScript.Geometry import *

                # The inputs to this node will be stored as a list in the IN variables.
                dataEnteringNode = IN

                # Place your code below this line
                inone =IN[0]
                intwo = IN[1]
                s = IN[2]
                o = []
                for i in range(len(inone)):
                sm = inone[i]
                em = intwo[i]
                hs = []
                #m = sm
                hm = int(sm/s+1)*s
                #hm = int(sm/100+1)*100-50
                if sm != hm:
                    hs.append(sm)
                while (hm < em):
                    hs.append(hm)
                    #hm += 100
                    hm += s
                hs.append(em)
                o.append(hs)
                # Assign your output to the OUT variable.
                OUT = o
                """
                # 4. Interpolate point on line on $Length \* fraction; Add line props to points, return and add to feature sink;

                for i in frac_list:
                    feature_new = QgsFeature()
                    # Add a feature in the sink
                    sink.addFeature(feature_new, QgsFeatureSink.FastInsert)
            else:
                pass

            # 5. Update Progress.
            # Update the progress bar
            feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Line interpolate equidistant points"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Vector Algorithms"

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return ChainageToolAlgorithm()
